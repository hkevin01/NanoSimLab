[build-system]
requires = ["hatchling>=1.25.0"]
build-backend = "hatchling.build"

[project]
name = "nanosimlab"
version = "0.1.0"
description = "Lightweight Brownian dynamics and analysis toolkit for nanoparticles and proto-nanorobotics."
readme = "README.md"
license = { text = "MIT" }
authors = [{ name = "Kevin", email = "kevin@example.com" }]
requires-python = ">=3.10"
dependencies = [
    "numpy>=1.24",
    "scipy>=1.10",
    "click>=8.1",
    "fastapi>=0.104.0",
    "uvicorn[standard]>=0.24.0",
    "pydantic>=2.4.0",
]
keywords = [
    "nanotechnology",
    "nanorobotics",
    "brownian dynamics",
    "simulation",
    "materials",
]
classifiers = [
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "License :: OSI Approved :: MIT License",
    "Topic :: Scientific/Engineering :: Physics",
    "Topic :: Scientific/Engineering :: Chemistry",
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Science/Research",
]

[project.optional-dependencies]
analysis = ["matplotlib>=3.7", "seaborn>=0.12"]
molsim = ["mdanalysis>=2.6", "gsd>=3.2", "freud-analysis>=2.15"]
builder = [
    "ase>=3.22.1",
    "pymatgen>=2024.5.1",
    "mbuild>=0.17.1",
    "openbabel-wheel>=3.1.1.20; platform_system != 'Linux'",
]
viz = ["nglview>=3.1", "py3Dmol>=2.0.4", "plotly>=5.17"]
dev = [
    "pytest>=7.4",
    "pytest-cov>=4.1",
    "black>=23.0",
    "isort>=5.12",
    "flake8>=6.0",
    "mypy>=1.5",
    "pre-commit>=3.4",
]
docs = ["sphinx>=7.1", "sphinx-rtd-theme>=1.3", "myst-parser>=2.0"]

[project.scripts]
nanosim = "nanosimlab.cli:main"

[project.urls]
Homepage = "https://github.com/hkevin01/NanoSimLab"
Documentation = "https://nanosimlab.readthedocs.io"
Repository = "https://github.com/hkevin01/NanoSimLab.git"
Issues = "https://github.com/hkevin01/NanoSimLab/issues"

[tool.hatch.build.targets.wheel]
packages = ["src/nanosimlab"]

[tool.black]
line-length = 100
target-version = ['py310']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
line_length = 100
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true

[tool.mypy]
python_version = "3.10"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = ["tests"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
]

[tool.coverage.run]
source = ["src"]
omit = ["*/tests/*", "*/test_*"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
